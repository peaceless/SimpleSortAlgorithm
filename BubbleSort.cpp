void BubbleSort(ElemType A[],int n){
	//冒泡排序法将序列A中的元素按从小到大排列
	for(i = 0;i < n-1;i++){
		flag = false;	//表示本趟冒泡是否发生交换的标志
		for(j = n-1;j > 1;j --){	//一趟冒泡过程
			if(A[j-1].key > A[j].key){//若为逆序
				swap(A[j-1],A[j]);//交换
				flag = true;
			}
			if(flag == flase)
				return;//本趟遍历后没有发生交换，说明表已经有序；
		}
	}
}
/*
 * 空间效率：仅使用常数个辅助单元，O(1)
 * 时间效率：当初始序列有序时，比较次数为n-1，移动次数为0，从而最好时间复杂度为o(n)
 * 当初始序列无序时，需要进行n-1趟排序，第i趟排序要进行n-1
 * 次关键字的比较，而且每次比较都必须移动3次
 * 这种情况下：
 * 比较次数n(n-1)/2,移动次数3n(n-1)/2
 * 从而，最坏情况下时间复杂度为O(n²)，其平均时间复杂度也为O(n²).
 */